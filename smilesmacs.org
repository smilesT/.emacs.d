#+TITLE: Miles Emacs

* Introduction
  This configuration file contains setup of Emacs packages for Language Server Protocol (LSP). I will use ~use-package~ for package management.

* Setup
  Since this is an org file, I am using ~org-babel-load-file~ command to load this file from [[init.el]] file. Emacs loads [[init.el]] when it starts. I have setup a variable called ~EMACS_DIR~ to point to *.emacs.d* as the setup directory. Adjust it to match your system. To speed up loading time of emacs, I have ~used gc-cons-threshold~ and ~gc-cons-percentage~ variables, before and after loading this configuration file. I have set ~gc-cons-threshold~ value to 300 mb after startup. Adjust it to comfortable value according to memory in your system. ~lsp-java~ package however has ~1GB~ setup as default.

** Setup repository in org file
In the following code block, we will initialize package repositories and after that install ~use-package~. This package is used to install other packages.

 #+BEGIN_SRC emacs-lisp

   (setq EMACS_DIR "~/.emacs.d/")
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")))

   (package-initialize)

    ; Fetch the list of packages available
    (unless package-archive-contents (package-refresh-contents))

    ; Install use-package
    (setq package-list '(use-package))
    (dolist (package package-list)
    (unless (package-installed-p package) (package-install package)))

   (use-package delight :ensure t)
   (use-package use-package-ensure-system-package :ensure t)

 #+END_SRC
** Basic setup
Here, I add some basic emacs setup like loading the language, disabling the toolbar, setting up backup directory etc. I have added comments to each setting.

#+BEGIN_SRC emacs-lisp
  ;; Disable annoying ring-bell when backspace key is pressed in certain situations
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Prefer spaces over tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefer the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   user-full-name "Miles Str√§ssle"                  ; Set the full name of the current user
   user-mail-address "straessle.miles@gmail.com"    ; Set the email address of the current user
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                               ; Always open read-only buffers in view-mode

  (column-number-mode 1)                            ; Show the column number

  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent

  (setq ring-bell-function 'ignore)

  ;; Disable scrollbar and toolbar
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  ;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; Longer whitespace, otherwise syntax highlighting is limited to default column
  (setq whitespace-line-column 1000)

  ;; Enable soft-wrap
  (global-visual-line-mode 1)

  ;; Maintain a list of recent files opened
  (recentf-mode 1)
  (setq recentf-max-saved-items 50)

  ;; Move all the backup files to specific cache directory
  ;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR

  (setq user-cache-directory (concat EMACS_DIR "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
        url-history-file (expand-file-name "url/history" user-cache-directory)
        auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
        projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))


  ;; Coding specific setting

  ;; Automatically add ending brackets and braces
  (electric-pair-mode 1)

  ;; Make sure tab-width is 4 and not 8
  (setq-default tab-width 4)

  ;; Highlight matching brackets and braces
  (show-paren-mode 1)
#+END_SRC

** Line Numbers

#+begin_src elisp

  (global-display-line-numbers-mode)

  (advice-add 'linum-mode :override 'display-line-numbers-mode)
#+end_src

* Looks
** Fonts

Spending most of our time on GNU Emacs, it is important to use a font that will
make our reading easier. [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] is one of the best monospaced font.

#+begin_src emacs-lisp
   (set-face-attribute 'default nil
                       :font "Source Code Pro"
  :family "Source Code Pro"
  ;;:height 150
  :weight 'medium
  :width 'normal
  )

   (set-fontset-font t 'latin "Noto Sans")
#+end_src

Do not forget to install this font with your system manager and to check the
font installation.

#+begin_src shell
  fc-list | grep "Source Code Pro"
#+end_src

** Theme
   I tend to like *doom-themes* package. Below we will install doom theme. In addition, I will also install a package called *heaven-and-hell*. This allows us to toggle between two themes using a shortcut key. I will assign ~F6~ key to toggling the theme and ~C-c F6~ to set to default theme.

#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :init
      (load-theme 'doom-tomorrow-night t)
      (doom-themes-org-config))

    (use-package doom-modeline
      :init (doom-modeline-mode)
      :custom
      (doom-modeline-icon (display-graphic-p))
      (doom-modeline-time-icon t)
      )

  (setq display-time-string-forms
        '((propertize (concat " " 24-hours ":" minutes " "))))
  (display-time-mode 1) ; Enable time in the mode-line

  ;; (after! doom-modeline
  (let ((battery-str (battery)))
    (unless (or (equal "Battery status not available" battery-str)
                (string-match-p (regexp-quote "unknown") battery-str)
                (string-match-p (regexp-quote "N/A") battery-str))
      ))
  (display-battery-mode 1)


    (use-package nyan-mode
      :after doom-modeline
      :config
      (setq nyan-bar-length 15)
      (setq battery t)
      )

   (setq nyan-mode t)
   (setq nyan-start-animation t)
#+END_SRC

Since we do not do things by halves, it is also interesting to visually
differentiate "real" buffers (e.g., buffers that contain our work) from "unreal"
buffers (e.g., popups) by giving the latter a darker color. From then on,
[[https://github.com/hlissner/emacs-solaire-mode][solar-mode]] is the ideal package.

#+begin_src emacs-lisp
  (use-package solaire-mode
    :defer 0.1
    :custom (solaire-mode-remap-fringe t)
    :config (solaire-global-mode))
#+end_src

** Remove Mouse Interface

If you have to use the mouse with GNU Emacs, you probably have the wrong text
editor. Let's remove all those menu items related to the mouse interface.

#+begin_src emacs-lisp
  (when window-system
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1))

  (set-frame-parameter nil 'fullscreen 'fullboth)

#+end_src


 * Management

Section dedicated to managing buffers, files, and windows on GNU Emacs to
provide a more pleasant experience.

** Buffers

Buffers can quickly become a mess to manage. To manage them better, I use the
=ibuffer= built-in package instead of =buffer-menu=, to have a nicer visual
interface with a syntax color.

In addition, some buffers may contain useful temporary information that should
not be killed by accident. I make sure to set the buffers =*scratch*= and
=*Messages*= to read-only.

#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :preface
    (defvar protected-buffers '("*scratch*" "*Messages*")
      "Buffer that cannot be killed.")

    (defun my/protected-buffers ()
      "Protect some buffers from being killed."
      (dolist (buffer protected-buffers)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill))))
    :bind ("C-x C-b" . ibuffer)
    :init (my/protected-buffers))
#+end_src

For buffer navigation, the next function is a more efficient way to go to the
beginning of a line with =move-beginning-of-line= (=C-a=) and =back-to-indentation=
(=M-m=).

#+begin_src emacs-lisp
  (use-package imenu
    :ensure nil
    :preface
    (defun my/smarter-move-beginning-of-line (arg)
      "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first. If
     point reaches the beginning or end of the buffer, stop there."
      (interactive "^p")
      (setq arg (or arg 1))

      ;; Move lines first
      (when (/= arg 1)
        (let ((line-move-visual nil))
          (forward-line (1- arg))))

      (let ((orig-point (point)))
        (back-to-indentation)
        (when (= orig-point (point))
          (move-beginning-of-line 1))))
    :bind (("C-a" . my/smarter-move-beginning-of-line)
           ("C-r" . imenu)))
#+end_src

Finally, it is useful to be able to move a line or a region up and down without
having to =kill-region= (=C-w=) and =yank (C-y)=. With the =move-text-up= and
=move-text-down= commands, the [[https://github.com/emacsfodder/move-text][move-text]] package allows to moves the current line
or if marked, the current region's, whole lines.

#+begin_src emacs-lisp
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+end_src


** ANSII
#+begin_src elisp

   (defun my/ansi-colorize-buffer ()
   (let ((buffer-read-only nil))
   (ansi-color-apply-on-region (point-min) (point-max))))

   (use-package ansi-color
   :ensure t
   :config
   (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
   )

  (add-hook 'compilation-filter-hook
          (lambda () (ansi-color-apply-on-region (point-min) (point-max))))
#+end_src
** Files

Sometimes you may want to discard your changes to a file and revert to the saved
version of this file.

#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :delight auto-revert-mode
    :bind ("C-x R" . revert-buffer)
    :custom (auto-revert-verbose nil)
    :config (global-auto-revert-mode))
#+end_src

To manage your files, =dired= is already a good file manager. To fine-tune its
use, let's change some default values.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (:map dired-mode-map
                ("h" . dired-up-directory)
                ("j" . dired-next-line)
                ("k" . dired-previous-line)
                ("l" . dired-single-buffer))
    :delight "Dired"
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alh --group-directories-first")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))
#+end_src

To avoid =dired= to keep buffers, I use [[https://github.com/crocket/dired-single][dired-single]].

To avoid =dired= to keep buffers, I use [[https://github.com/crocket/dired-single][dired-single]].

#+begin_src emacs-lisp
  (use-package dired-single
    :after dired
    :bind (:map dired-mode-map
                ([remap dired-find-file] . dired-single-buffer)
                ([remap dired-up-directory] . dired-single-up-directory)
                ("M-DEL" . dired-prev-subdir)))
#+end_src

By default, =dired= opens files in plain text. This behavior is sometimes
undesirable. Hopefully, [[https://github.com/Fuco1/dired-hacks/blob/master/dired-open.el][dired-open]] can be used to informs =dired= that certain
desired file extensions must be opened with external packages to GNU Emacs.

#+begin_src emacs-lisp
  (use-package dired-open
    :after (dired dired-jump)
    :custom (dired-open-extensions '(("mp4" . "mpv"))))
#+end_src

To know the type of file at a glance, [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] integrates icons
directly into =dired=.

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

It is sometimes convenient to hide dotfiles. With [[https://github.com/mattiasb/dired-hide-dotfiles][dired-hide-dotfiles]] this
becomes possible.

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles	;
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map
            ("H" . dired-hide-dotfiles-mode)))
#+end_src

I like being able to =<TAB>= on a folder and see its contents, without me getting
into it. [[https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el][dired-subtree]] allows this behavior.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
            ("<tab>" . dired-subtree-toggle)))
#+end_src

Finally, to manage folders with a large number of files, it may be useful to
filter with [[https://github.com/Fuco1/dired-hacks/blob/master/dired-narrow.el][dired-narrow]]

#+begin_src emacs-lisp
  (use-package dired-narrow
    :ensure nil
    :bind (("C-c C-n" . dired-narrow)
           ("C-c C-f" . dired-narrow-fuzzy)))
#+end_src

** Windows

Most of the time, I want to split a window and put the focus on it to perform an
action. By default GNU Emacs does not give the focus to this new window. I have
no idea why this is not the default behavior, but we can easily set this
behavior.

#+begin_src emacs-lisp
  (use-package window
    :ensure nil
    :bind (("C-x 2" . vsplit-last-buffer)
	   ("C-x 3" . hsplit-last-buffer)
	   ;; Don't ask before killing a buffer.
	   ([remap kill-buffer] . kill-this-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))



  (defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	 (next-win-buffer (window-buffer (next-window)))
	 (this-win-edges (window-edges (selected-window)))
	 (next-win-edges (window-edges (next-window)))
	 (this-win-2nd (not (and (<= (car this-win-edges)
		     (car next-win-edges))
		     (<= (cadr this-win-edges)
		     (cadr next-win-edges)))))
	 (splitter
	  (if (= (car this-win-edges)
	     (car (window-edges (next-window))))
	  'split-window-horizontally
	'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))

  (define-key ctl-x-4-map "t" 'toggle-window-split)
#+end_src


The way I move between several windows in GNU Emacs is by indicating the number
of the window I want to move to. Most people use [[https://github.com/abo-abo/ace-window][ace-window]], but I prefer
[[https://github.com/dimitri/switch-window][switch-window]] which displays the window number while hiding its content. I find
this behavior more convenient than moving from window to window to get to the
one we are looking for.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
                aw-char-position 'left
                aw-ignore-current nil
                aw-leading-char-style 'char
                aw-scope 'frame)
    :bind (("M-o" . ace-window)
           ("M-O" . ace-swap-window)))
  #+end_src

There are times when I would like to bring back a windows layout with their
content. With the =winner-undo= and =winner-redo= commands from the built-in =winner=
package, I can easily do that.

#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :config (winner-mode))
#+end_src

** Package Manager

Contrary to what some users might think, =use-package= is not a package
manager. To download and use packages that are not available in package sources,
I use [[https://github.com/raxod502/straight.el][straight]]. The snippet below takes care of installing =straight=.

#+begin_src emacs-lisp
  ;; Bootstrap straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Integrates `straight' directly into the `use-package' package through the
  ;; `:straight' expression.
  (straight-use-package 'use-package)
#+end_src

* Minibuffer Completion

Having a good minibuffer completion is important on GNU Emacs since it is one of
the elements we will frequently interact with. In the beginning I used [[https://github.com/emacs-helm/helm][helm]], but
I found it to be memory intensive for the few features I was using. From this
observation I switched to [[https://github.com/abo-abo/swiper][ivy]] for many years, which is a faster and a lighter
framework than =helm=. However, =ivy= is still a framework.

Since then, newer completion systems have emerged (e.g., [[https://github.com/minad/vertico][vertico]], [[https://github.com/minad/vertico][selectrum]],
and [[https://github.com/oantolin/icomplete-vertical][icomplete-vertical]]), designed to be optimized for a single task and nested
with other packages with the same vision. That's why I now use =vertico= instead
of =ivy=.

*NOTE*: =selectrum= is also a good alternative to =ivy=, but is less minimal than
=vertico=.

#+begin_src emacs-lisp
    (use-package vertico
      :straight (:files (:defaults "extensions/*"))
      :init (vertico-mode)
      :bind (:map vertico-map
                  ("C-<backspace>" . vertico-directory-up))
      :custom (vertico-cycle ))
#+end_src

To enable richer annotations (e.g., summary documentation of the functions and
variables, as well as having the size and the last consultation of the files)
for minibuffer completions, [[https://github.com/minad/marginalia/][marginalia]] is awesome.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

If like me you like to have icons associated with candidates, you can use
[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]].


#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src

By default, =vertico= sorts the candidates according to their history position,
then by length and finally by alphabetical. To improves searching across
completion (e.g., by filter expressions separated by spaces), you should
use [[https://github.com/oantolin/orderless][orderless]] (or [[https://github.com/raxod502/prescient.el][prescient]]).

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless)))
#+end_src

There is nothing like a collection of commands to have additional
completions. [[https://github.com/minad/consult][consult]] provides this collection.

#+begin_src emacs-lisp
  (use-package consult
    :after projectile
    :bind  (;; Related to the control commands.
            ("<help> a" . consult-apropos)
            ("C-x b" . consult-buffer)
            ("C-x M-:" . consult-complex-command)
            ("C-c k" . consult-kmacro)
            ;; Related to the navigation.
            ("M-g a" . consult-org-agenda)
            ("M-g e" . consult-error)
            ("M-g g" . consult-goto-line)
            ("M-g h" . consult-org-heading)
            ("M-g i" . consult-imenu)
            ("M-g k" . consult-global-mark)
            ("M-g l" . consult-line)
            ("M-g m" . consult-mark)
            ("M-g o" . consult-outline)
            ("M-g I" . consult-project-imenu)
            ;; Related to the search and selection.
                        ("M-s G" . consult-git-grep)
            ("M-s g" . consult-grep)
            ("M-s k" . consult-keep-lines)
            ("M-s l" . consult-locate)
            ("M-s m" . consult-multi-occur)
            ("M-s r" . consult-ripgrep)
            ("M-s u" . consult-focus-lines)
            ("M-s f" . consult-find))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (consult-narrow-key "<")
    (consult-project-root-function #'projectile-project-root)
    ;; Provides consistent display for both `consult-register' and the register
    ;; preview when editing registers.
    (register-preview-delay 0)
    (register-preview-function #'consult-register-preview))
#+end_src

Finally, [[https://github.com/oantolin/embark/][embark]] is great if like me you like to interact directly with your
files (e.g., for renaming, deleting and copying) through your completion system
without having to go through =dired=.

#+begin_src emacs-lisp
  (use-package embark
    :bind ("C-." . embark-act))
#+end_src

* Auto-Completion


Auto-completion with GNU Emacs is mainly combined with LSP mode.  Therefore the
development of any programming language is made easier with auto-completion,
which involves a completion at point followed by the display of a small pop-in
containing the candidates.

Nowadays there are two main possibilities: [[https://github.com/company-mode/company-mode][company-mode]] and [[https://github.com/minad/corfu][corfu]]. Personally I
have tried to make an attempt with =corfu= but I always prefer =company-mode= as it
seems to be easier and smoother to configure.

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.5)
    (company-minimum-prefix-length 1)
    (company-show-quick-access t)
    (company-tooltip-align-annotations 't))
#+end_src

To get nice candidate icons differentiating a function from a variable at a
glance, I use [[https://github.com/sebastiencs/company-box/][company-box]].

#+begin_src emacs-lisp
  (use-package company-box
    :if (display-graphic-p)
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

* Custom Packages
  In this section we will install some of the packages that we will use for various project and file management.

** Key-Chord
   Key-Chord allows us to bind regular keyboard keys for various commands without having to use prefix keys such as Ctrl, Alt or Super etc.

#+begin_src emacs-lisp
(use-package use-package-chords
:ensure t
:init
:config (key-chord-mode 1)
(setq key-chord-two-keys-delay 0.4)
(setq key-chord-one-key-delay 0.5) ; default 0.2
)
#+end_src
Here, we changed the delay for the consecutive key to be little higher than default. Adjust this to what you feel comfortable.

** Projectile
   Projectile helps us with easy navigation within a project. Projectile recognizes several source control managed folders e.g *git, mercurial, maven, sbt*, and a folder with empty *.projectile* file. You can use ~C-c p~ to invoke any projectile command. This is a very useful key to remember.

#+begin_src emacs-lisp
(use-package projectile
:ensure t
:init (projectile-mode +1)
:config
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
)
#+end_src
** Helm
Helm allows for easy completion of commands. Below, we will replace several of the built in functions with helm versions and add keyboard shortcuts for couple of new useful commands.

#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:init
(helm-mode 1)
(progn (setq helm-buffers-fuzzy-matching t))
:bind
(("C-c h" . helm-command-prefix))
(("M-x" . helm-M-x))
(("C-x C-f" . helm-find-files))
(("C-x b" . helm-buffers-list))
(("C-c b" . helm-bookmarks))
(("C-c f" . helm-recentf))   ;; Add new key to recentf
(("C-c g" . helm-grep-do-git-grep)))  ;; Search using grep in a git project
#+END_SRC

I want to point out, couple of interesting things from above setup. Just like we added ~C-c p~ as a prefix for projectile, here we added ~C-c h~ for helm. We also enabled fuzzy matching, so that your search text don't need to be very stict. Also, I added ~C-c g~ to helm-grep-do-git-grep. I can search files with specific text within a git project (make sure to commit it first).

** Helm Descbinds
Helm descbinds helps to easily search for keyboard shortcuts for modes that are currently active in the project. This can be helpful to discover keyboard shortcuts to various commands. Use ~C-h b~ to bring up helm-descbinds window.

#+begin_src emacs-lisp
(use-package helm-descbinds
:ensure t
:bind ("C-h b" . helm-descbinds))
#+end_src

E.g. In helm-descbinds window you could type "helm" and "projectile" and see all the shortcuts assigned to various commands.

** Helm swoop
Helm swoop allows to quickly search for text under cursor or new text within current file. I am sure you are already using ~C-s~ and ~C-r~ to search within the file. This package compliments rather than replace it. You can quickly type ~js~ to search and jump to the target line. To go back to where you started searching, use ~jp~. You can use ~M-m~ from ~C-s~ and ~C-r~ search to start using helm-swoop as described in below setting.

#+begin_src emacs-lisp
(use-package helm-swoop
:ensure t
:chords
("js" . helm-swoop)
("jp" . helm-swoop-back-to-last-point)
:init
(bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map)

;; If you prefer fuzzy matching
(setq helm-swoop-use-fuzzy-match t)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;; Split direction. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)

;; ;; Go to the opposite side of line from the end or beginning of line
(setq helm-swoop-move-to-line-cycle t)

)
#+end_src

** Avy Goto
   Avy allows you to quickly jump to certain character, word or line within the file. Use ~jc~, ~jw~ or ~jl~ to quickly jump within current file. Change it to other keys, if you feel you are using this set of keys for other purposes.

#+begin_src emacs-lisp
(use-package avy
:ensure t
:chords
("jc" . avy-goto-char)
("jw" . avy-goto-word-1)
("jl" . avy-goto-line))
#+end_src

** Which Keys
For some prefix commands like ~C-c p~ or ~C-c h~ we want Emacs to visually guide you through the available options. Following package allows us to do that.
#+begin_src emacs-lisp
(use-package which-key
:ensure t
:init
(which-key-mode)
)
#+end_src
** Run Code
We can use quickrun package to execute code (if it has main). E.g. If you have a java file with main method, it will run with the associated shortcut key ~C-c r~ or quickrun command. Quickrun has support for several languages.
#+begin_src emacs-lisp
(use-package quickrun
:ensure t
:bind ("C-c r" . quickrun))
#+end_src
* Language Server Protocol (LSP)
  With above setup done, below we will setup several packages closely related to LSP.

** Company
Complete anything aka Company provides auto-completion. Company-capf is enabled by default when you start LSP on a project. You can also invoke ~M-x company-capf~ to enable capf (completion at point function).
#+begin_src emacs-lisp
(use-package company :ensure t)
#+end_src

** Yasnippet
Yasnippet is a template system for Emacs. It allows you to type abbreviation and complete the associated text.

#+begin_src emacs-lisp
(use-package yasnippet :config (yas-global-mode))
(use-package yasnippet-snippets :ensure t)
#+end_src

E.g. In java mode, if you type ~pr~ and hit ~<TAB>~ it should complete to ~System.out.println("text");~

To create a new snippet you can use ~yas-new-snippet~ command.

** FlyCheck
FlyCheck checks for errors in code at run-time.
#+begin_src emacs-lisp
(use-package flycheck :ensure t :init (global-flycheck-mode))
#+end_src

** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your program. Below we will integrate ~dap-mode~ with ~dap-hydra~. ~Dap-hydra~ shows keys you can use to enable various options and jump through code at runtime. After we install dap-mode we will also install ~dap-java~.

#+begin_src emacs-lisp



    (use-package dap-mode
      :ensure t
      :after (lsp-mode)
      :functions dap-hydra/nil
      :config
      (global-set-key (kbd "<f7>") 'dap-step-in)
      (global-set-key (kbd "<f8>") 'dap-next)
      (global-set-key (kbd "<f9>") 'dap-continue)
           :hook ((dap-mode . dap-ui-mode)
       (dap-session-created . (lambda (&_rest) (dap-hydra)))
       (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))
   ;; (dap-mode t)
   ;;    (setq dap-ui-locals-expand-depth 3)
   ;;    (dap-ui-mode t)
   ;;    (dap-tooltip-mode 1)
   ;;    (tooltip-mode 1)
   ;;    (dap-register-debug-template
   ;;     "localhost:5005"
   ;;     (list :type "java"
   ;;           :request "attach"
   ;;           :hostName "localhost"
   ;;           :port 5005))
   ;;    (dap-register-debug-template
   ;;     "lxd"
   ;;     (list :type "java"
   ;;           :request "attach"
   ;;           :hostName "10.152.112.168"
   ;;           :port 5005))
  ;;    )
      ;; :bind (:map lsp-mode-map
      ;;        ("<f5>" . dap-debug)
      ;;        ("M-<f5>" . dap-hydra))


    (use-package dap-java
        :ensure nil
        :after (lsp-java)

        ;; The :bind here makes use-package fail to lead the dap-java block!
        :bind
        (("C-c R" . dap-java-run-test-class)
         ("C-c d" . dap-java-debug-test-method)
         ("C-c r" . dap-java-run-test-method)
         )
        )
#+end_src

** Treemacs
Treemacs provides UI elements used for LSP UI. Let's install lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to show error list.
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :after (lsp-mode))
#+end_src

** LSP UI
LSP UI is used in various packages that require UI elements in LSP. E.g ~lsp-ui-flycheck-list~ opens a windows where you can see various coding errors while you code. You can use ~C-c l T~ to toggle several UI elements. We have also remapped some of the xref-find functions, so that we can easily jump around between symbols using ~M-.~, ~M-,~ and ~M-?~ keys.

#+begin_src emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
	  lsp-ui-doc-max-width 100
))
#+end_src

Go through this [[https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el][link]]  to see what other parameters are provided.

** Helm LSP
Helm-lsp provides various functionality to work with the code. E.g Code actions like adding *getter, setter, toString*, refactoring etc. You can use ~helm-lsp-workspace-symbol~ to find various symbols (classes) within your workspace.

LSP's built in symbol explorer uses ~xref-find-apropos~ to provide symbol navigation. Below we will replace that with helm version. After that you can use ~C-c l g a~ to find workspace symbols in a more intuitive way.

#+begin_src emacs-lisp
(use-package helm-lsp
:ensure t
:after (lsp-mode)
:commands (helm-lsp-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+end_src

** Install LSP Package
Let's install the main package for lsp. Here we will integrate lsp with which-key. This way, when we type the prefix key ~C-c l~ we get additional help for compliting the command.

#+begin_src emacs-lisp


    (use-package lsp-mode
        :ensure t
        :hook (
           (lsp-mode . lsp-enable-which-key-integration)
           (java-mode . #'lsp-deferred)
        )
        :init (setq
            lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
            lsp-enable-file-watchers nil
            read-process-output-max (* 1024 1024)  ; 1 mb
            lsp-completion-provider :capf
            lsp-idle-delay 0.500
        )
        :config
            (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
            (with-eval-after-load 'lsp-intelephense
            (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
            (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
            ;; Performance tweaks, see
            ;; https://github.com/emacs-lsp/lsp-mode#performance
            (setq gc-cons-threshold 100000000)
            (setq read-process-output-max (* 1024 1024)) ;; 1mb
            (setq lsp-idle-delay 0.500)
        )
#+end_src

You can start LSP server in a java project by using ~C-c l s s~. Once you type ~C-c l~ ~which-key~ package should guide you through rest of the options. In above setting I have added some memory management settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]]. Change them to higher numbers, if you find *lsp-mode* sluggish in your computer.


* Programming Languages and Tools

Section dedicated to the definition and customization of different programming
languages and their tools. If you have the need to specify other programming
languages, please check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][languages section]] of the LSP mode website.

** Assembly
#+begin_src emacs-lisp
(defun my-asm-mode-hook ()
  ;; you can use `comment-dwim' (M-;) for this kind of behaviour anyway
  (local-unset-key (vector asm-comment-char))
  ;; asm-mode sets it locally to nil, to "stay closer to the old TAB behaviour".
  (setq tab-always-indent (default-value 'tab-always-indent)))

(add-hook 'asm-mode-hook #'my-asm-mode-hook)
#+end_src
** Bash

Being a UNIX user, I often do Bash. Since GNU Emacs already supports it, I only
use the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-bash/][bash-language-server]] (=bash-ls=) as LSP server. To use it, do not forget
to configure the LSP package and to install this LSP server through LSP mode or
with your system package manager.

Finally, the following snippet ensures that execution right (with =chmod +x=) is
automatically granted to save a shell script file that begins with a =#!= shebang.

#+begin_src emacs-lisp
  (use-package sh-script
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** C++ --TODO
When I develop in C++ with GNU Emacs, I use the [[https://github.com/MaskRay/ccls][ccls]] LSP server. To use it, do
not forget to configure the LSP package and to install this LSP server through
your system package manager.

#+begin_src emacs-lisp
  (use-package ccls
    :after projectile
    :hook ((c-mode c++-mode objc-mode cuda-mode) . lsp-deferred)
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    (projectile-project-root-files-top-down-recurring
     (append '("compile_commands.json" ".ccls")
             projectile-project-root-files-top-down-recurring))
    :config (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))
#+end_src

To allow =ccls= to know the dependencies of your =.cpp= files with your =.h=
files, it is important to provide an =compile.commands.json= file (or a =.ccls=
file) at the root of your project.

For this, nothing could be easier. If like me you use a =CMakeLists.txt= file for
all your C++ projects, then you just need to install the =cmake= package on your
operating system. From then on, the =compile.commands.json= file is generated with
the following commands:

#+begin_src shell
  cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
  ln -s Debug/compile_commands.json
#+end_src

#+RESULTS:

Finally, if you follow [[https://google.github.io/styleguide/cppguide.html][Google's C/++ conventions]] like I do, the [[https://github.com/google/styleguide/blob/gh-pages/google-c-style.el][google-c-style]]
package changes some default values to ensure that you follow these conventions
as much as possible.

#+begin_src emacs-lisp
  (use-package google-c-style
    :hook (((c-mode c++-mode) . google-set-c-style)
           (c-mode-common . google-make-newline-indent)))
#+end_src
** ANSII-Colors

#+begin_src emacs-lisp
(require 'ansi-color)
(defun endless/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))))

(add-hook 'compilation-filter-hook
          #'endless/colorize-compilation)
#+end_src

** CMake

CMake is a cross-platform build system generator. For its support with GNU
Emacs, the [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]] package with the installation of the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-cmake/][cmake-language-server]]
LSP server is sufficient. To use it, do not forget to configure the LSP package
and to install this LSP server through LSP mode or with your system package
manager.

#+begin_src emacs-lisp
  (use-package cmake-mode
    :hook (cmake-mode . lsp-deferred)
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
#+end_src

To better manage syntax colors, especially with respect to function arguments,
it is visually useful to install [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]].
#+begin_src emacs-lisp
  (use-package cmake-font-lock
    :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

Finally, to compile with CMake in C++, I use [[https://github.com/atilaneves/cmake-ide/blob/master/cmake-ide.el][cmake-ide]], by indicating where the
=CMakeLists.txt= file is present in the project.

#+begin_src emacs-lisp
  (use-package cmake-ide
    :after projectile
    :init (cmake-ide-setup)
    :hook (c++-mode . my/cmake-ide-find-project)
    :preface
    (defun my/cmake-ide-find-project ()
      "Find the directory of the project for cmake-ide."
      (with-eval-after-load 'projectile
        (setq cmake-ide-project-dir (projectile-project-root))
        (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
      (setq cmake-ide-compile-command
            (concat "cd " cmake-ide-build-dir " && cmake .. && make"))
      (cmake-ide-load-db))

    (defun my/switch-to-compilation-window ()
      "Switch to the *compilation* buffer after compilation."
      (other-window 1))
    :bind ([remap comment-region] . cmake-ide-compile)
    :config (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window))
#+end_src

** Java
This is the package that handles server installation and session management.
#+begin_src  emacs-lisp
  (use-package lsp-java
    :ensure t
    :init
    (setq lsp-java-vmargs
          (list
           "-noverify"
           "-Xmx3G"
           "-XX:+UseG1GC"
           "-XX:+UseStringDeduplication"
           "-javaagent:/home/i/.lombok/lombok.jar"
           )
          ;; Don't organise imports on save
          ;;lsp-java-save-action-organize-imports nil

          ;; Fetch less results from the Eclipse server
          lsp-java-completion-max-results 30

          ;; Download 3rd party sources from Maven repo
          lsp-java-maven-download-sources t

          ;; Don't format my source code (I use Maven for enforcing my
          ;; coding style)
          lsp-java-format-enabled nil

          ;; Error if not defined and multiple javac available
          lsp-java-java-path "/usr/lib/jvm/java-openjdk/bin/java"
          )
    :config
    (add-hook 'java-mode-hook #'lsp)
    )

#+end_src

*** Gradle
#+begin_src emacs-lisp



  (use-package gradle-mode
    :hook (java-mode . gradle-mode)
    :preface
    (defun my/switch-to-compilation-window ()
      "Switch to the *compilation* buffer after compilation."
      (other-window 1))
    :bind (:map gradle-mode-map
                ("C-c C-c" . gradle-build)
                ("C-c C-t" . gradle-test))
    :config
    (advice-add 'gradle-build :after #'my/switch-to-compilation-window)
    (advice-add 'gradle-test :after #'my/switch-to-compilation-window))
#+end_src
*** Maven
#+begin_src emacs-lisp


  ;; (require 'pom)
  ;; (let ((pom (pom-read-pom)))
  ;;   (jde-project-file-version "1.0")
  ;;   (jde-set-variables
  ;;    '(jde-javadoc-gen-destination-directory "./target/docs/apidocs")
  ;;    '(jde-project-name (pom-get-project-id pom))
  ;;    '(jde-global-classpath (pom-get-classpath pom))))

#+end_src
** CSharp

#+begin_src emacs-lisp

  (use-package dotnet
  :ensure t
  :config
  (add-hook 'csharp-mode-hook 'dotnet-mode))

(use-package csharp-mode
  :ensure t)
  #+end_src

#+RESULTS:
** Go

** Rust

** CSV

For my viewing pleasure, =csv-mode= provides a color syntax when editing CSV
files.

#+begin_src emacs-lisp
  (use-package csv-mode :mode ("\\.\\(csv\\|tsv\\)\\'"))
#+end_src

** R
#+begin_src emacs-lisp
;; ESS configurationEmacs Speaks Statistics
(use-package ess
  :ensure t
)
#+end_src>

** Dockerfile

I often use Docker with Dockerfile. To support it with LSP and GNU Emacs, the
package dockerfile-mode with [[dockerfile-language-server-nodejs][dockerfile-language-server-nodejs]] (=dockerfile-ls=)
as LSP server is enough. To use it, do not forget to configure the LSP package
and to install this LSP server through LSP mode or with your system package
manager.

#+begin_src emacs-lisp
  (use-package dockerfile-mode :delight "Œ¥" :mode "Dockerfile\\'")
#+end_src

** EPUB

Sometimes I have to read digital books in EPUB format. The [[https://github.com/wasamasa/nov.el][nov]] package allows to
open this kind of file.

#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom (nov-text-width 75))
#+end_src

** Gnuplot

Whether professionally or personally, it is often necessary to visualize your
data in a quality graph. [[http://www.gnuplot.info/][Gnuplot]] is the perfect tool for this and the[[https://github.com/emacsorphanage/gnuplot][ gnuplot]]
package allows to support this tool with GNU Emacs. To use gnuplot, do not
forget to install it with your system package manager.

#+begin_src emacs-lisp
  (use-package gnuplot
    :mode "\\.\\(gp\\|gpi\\|plt\\)'"
    :bind (:map gnuplot-mode-map
                ("C-c C-c".  gnuplot-send-buffer-to-gnuplot)))
#+end_src

** INI

To modify the INI files, you need to install the =ini-mode= package.

#+begin_src emacs-lisp
  (use-package ini-mode :mode "\\.ini\\'")
#+end_src

** JavaScript

JavaScript is one of those languages that needs a bit of setup time to get some
stability with GNU Emacs. By default GNU Emacs uses =js-mode= as the major mode
for JavaScript buffers. However, I prefer to use [[https://github.com/mooz/js2-mode][js2-mode]] which is an enhanced
version of =js-mode=. This package offers a better syntax highlighting and
proposes many other features.

As LSP server I use [[https://github.com/typescript-language-server/typescript-language-server][typescript-language-server]] (=ts-ls=) which is the one
recommended by the LSP mode community. To use the LSP server, do not forget to
configure the LSP package and to install this LSP server through LSP mode or
with your system package manager

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure flycheck
    :mode "\\.js\\'"
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . prettier-js-mode))
    :custom (js-indent-level 2)
    :config (flycheck-add-mode 'javascript-eslint 'js2-mode))
#+end_src

I like to use [[https://prettier.io/][prettier]] to get my TypeScript code clean. To use it, do not forget
to install it with your package manager.

#+begin_src emacs-lisp
  (use-package prettier-js
    :delight
    :custom (prettier-js-args '("--print-width" "100"
                                "--single-quote" "true"
                                "--trailing-comma" "all")))
#+end_src

To get additional refactoring functions, I use the [[https://github.com/js-emacs/js2-refactor.el][js2-refactor]] package. This
package also allows me to use the =js2r-kill= commands which easily delete the
implementation of a function.

#+begin_src emacs-lisp
  (use-package js2-refactor
    :hook (js2-mode . js2-refactor-mode)
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill)
                ("M-." . lsp-find-definition)))
#+end_src

*NOTE:* I have long used [[https://github.com/js-emacs/xref-js2][xref-js2]] to navigate through definitions and references
in JavaScript. However, lsp-mode now already provides this functionality for us.

Finally, I sometimes take a look at the generated =yarn.lock= file. To have a nice
syntax color and avoid modifying it, the [[https://github.com/anachronic/yarn-mode][yarn-mode]] package is perfect.

#+begin_src emacs-lisp
  (use-package yarn-mode :mode "yarn\\.lock\\'")
#+end_src

** JSON

JSON is probably the data format I use the most in the web. That's why its setup
below is a bit more advanced. As LSP server I prefer
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-json/][vscode-json-languageserver]]. To use it, make sure you install it with your
package manager and to configure the LSP package.

#+begin_src emacs-lisp
  (use-package json-mode
    :delight "J"
    :mode "\\.json\\'"
    :hook (before-save . my/json-mode-before-save-hook)
    :preface
    (defun my/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer)))

    (defun my/json-array-of-numbers-on-one-line (encode array)
      "Print the arrays of numbers in one line."
      (let* ((json-encoding-pretty-print
              (and json-encoding-pretty-print
                   (not (loop for x across array always (numberp x)))))
             (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
        (funcall encode array)))
    :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

** LaTeX

Being a lover of beautiful writing, it is important for me to have a stable
LaTeX environment. To have access to this stability, I use the =tex-mode= built-in
package and [[https://github.com/latex-lsp/texlab][texlab]] as LSP server. To use it, make sure you install it with your
package manager and to configure the LSP package.

With =tex-mode= we need to ensure to install AUCTeX, which is a built-in package
for writing and formatting TeX files in GNU Emacs. With =AUCTeX you can for
example use the =TeX-command-master= (=C-c C-c=) command to compile your TeX files
and the =LaTeX-environment= (=C-c C-e=) command to insert a LaTeX environment.

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :preface
    (defun my/switch-to-help-window (&optional ARG REPARSE)
      "Switches to the *TeX Help* buffer after compilation."
      (other-window 1))
    :hook (LaTeX-mode . reftex-mode)
    :bind (:map TeX-mode-map
                ("C-c C-o" . TeX-recenter-output-buffer)
                ("C-c C-l" . TeX-next-error)
                ("M-[" . outline-previous-heading)
                ("M-]" . outline-next-heading))
    :custom
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    :config
    (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
    (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
    ;; the ":hook" doesn't work for this one... don't ask me why.
    (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))
#+end_src

Also, I like to use a TeX engine that can handle Unicode and use the font of my
choice.

#+begin_src emacs-lisp
  (setq-default TeX-engine 'xetex)
#+end_src

By default, LSP mode uses =lsp-tex= as the LSP client for LaTeX. However, I prefer
to use [[https://github.com/ROCKTAKEY/lsp-latex][lsp-latex]] which fully supports =texlab=
(cf. https://github.com/ROCKTAKEY/lsp-latex/issues/26)

#+begin_src emacs-lisp
  (use-package lsp-latex
    :if (executable-find "texlab")
    ;; To properly load `lsp-latex', the `require' instruction is important.
    :hook (LaTeX-mode . (lambda ()
                          (require 'lsp-latex)
                          (lsp-deferred)))
    :custom (lsp-latex-build-on-save t))
#+end_src

To easier deal with =\label=, =\ref=, and =\cite= commands in LaTeX, I use the =reftex=
built-in package.

#+begin_src emacs-lisp
  (use-package reftex
    :ensure nil
    :custom
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t))
#+end_src

Finally, it is often useful to put our hands in a bibliography in LaTeX. The built-in
package =bibtex= improves the visual and provides several commands.

#+begin_src emacs-lisp
  (use-package bibtex
    :ensure nil
    :preface
    (defun my/bibtex-fill-column ()
      "Ensure that each entry does not exceed 120 characters."
      (setq fill-column 120))
    :hook ((bibtex-mode . lsp-deferred)
           (bibtex-mode . my/bibtex-fill-column)))
#+end_src

** Lua

I rarely program in Lua, but when I do, [[https://github.com/immerrr/lua-mode][lua-mode]] with [[https://emacs-lsp.github.io/lsp-mode/page/lsp-lua-language-server/][lua-language-server]] as LSP
server satisfies me amply. To use it, do not forget to configure the LSP package
and to install this LSP server through LSP mode or with your system package
manager.

#+begin_src emacs-lisp
  (use-package lua-mode :delight "Œõ" :mode "\\.lua\\'")
#+end_src

** Markdown

To edit my files in Markdown, I use [[https://github.com/jrblevin/markdown-mode][markdown-mode]] with [[https://emacs-lsp.github.io/lsp-mode/page/lsp-markdown/][unified-language-server]]
as LSP server. To use it, do not forget to configure the LSP package and to
install this LSP server with your system package manager. Added to that, to
convert Markdown files, you can also install [[https://github.com/jgm/pandoc][pandoc]] with your package manager
system.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :delight "Œº"
    :mode ("\\.\\(md\\|markdown\\)\\'")
    :custom (markdown-command "/usr/bin/pandoc"))
#+end_src

Finally, it is always good to have a preview of the Markdown rendering. The
[[https://github.com/ancane/markdown-preview-mode][markdown-preview-mode]] package allows this.

#+begin_src emacs-lisp
  (use-package markdown-preview-mode
    :commands markdown-preview-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

** PHP and HTML

I hope to never develop in PHP again. The few times I had to do it, I use mainly
use [[https://github.com/fxbois/web-mode][web-mode]] with [[https://github.com/bmewburn/vscode-intelephense][intelephense]] (=iph=) as LSP server for PHP and
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-html/][vscode-html-languageserver]] (=html-ls=) as LSP server for HTML. To use them, do not
forget to configure the LSP package and to install these LSP servers through LSP
mode or with your system package manager.

*NOTE:* to deal with HTML, I rarely use =html-mode= which does not handle HTML well
in the presence of CSS and JavaScript.

#+begin_src emacs-lisp
  (use-package web-mode
    :delight "‚ò∏"
    :preface
    (defun enable-minor-mode (my-pair)
      "Enable minor mode if filename match the regexp."
      (if (buffer-file-name)
          (if (string-match (car my-pair) buffer-file-name)
              (funcall (cdr my-pair)))))
    :mode ("\\.\\(html\\|jsx\\|php\\)\\'" . web-mode)
    :hook (web-mode . (lambda ()
                        (enable-minor-mode
                         '("\\.jsx?\\'" . prettier-js-mode))))
    :custom
    (web-mode-attr-indent-offset 2)
    (web-mode-block-padding 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-comment-style 2)
    (web-mode-enable-current-element-highlight t)
    (web-mode-markup-indent-offset 2))
#+end_src

** PlantUML
** Org Tempo Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

To make my UML diagrams with [[https://plantuml.com/][PlantUML]], I use [[https://github.com/skuro/plantuml-mode][plantuml-mode]]. Make sure you
[[https://plantuml.com/download][download the PlantUML compiled JAR]] and to indicate the path (e.g.,
=~/.local/lib/plantuml.jar=) of this JAR file with the =plantuml-jar-path= variable.

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :mode ("\\.\\(plantuml\\|puml\\)\\'")
    :custom (plantuml-jar-path
             (expand-file-name (format "%s/plantuml.jar" xdg-lib))))
  (setq org-plantuml-jar-path (expand-file-name "/home/i/.local/lib/plantuml.jar"))
#+end_src

** Babel Languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages '(
                                                           (plantuml . t)
                                                           (java .t)
                                                           ;;(haskel . t)
                                                           (latex .t)
                                                           (org .t)
                                                           ;;(cpp .t)
                                                           ))
   (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

#+RESULTS:

** Python

Python with GNU Emacs is one of the best supported languages. By using
=python-mode= and [[https://github.com/microsoft/pyright][pyright]] as LSP server, it's fun to develop in Python. With
=python-mode= I like to add some bindings to speed up the code code navigation in
Python. Besides that, I use [[https://github.com/myint/autoflake][autoflake]] to remove unused imports and variables.

#+begin_src emacs-lisp
  (use-package python
    :ensure flycheck
    :delight "œÄ"
    :preface
    (defun python-remove-unused-imports()
      "Remove unused imports and unused variables with autoflake."
      (interactive)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (warn "[‚úó] python-mode: Cannot find autoflake executable.")))
    :bind (:map python-mode-map
                ("M-[" . python-nav-backward-block)
                ("M-]" . python-nav-forward-block)
                ("M-|" . python-remove-unused-imports))
    :custom
    (flycheck-pylintrc "~/.pylintrc")
    (flycheck-python-pylint-executable "/usr/bin/pylint"))
#+end_src

I have tried several LSP servers. I have experienced that =mspyls= is faster than
=pylsp=, but =mspyls= has a memory leakage and became depreciated in favor of
=pyright=. To configure pyright with GNU Emacs, the [[https://github.com/emacs-lsp/lsp-pyright][lsp-pyright]] package is
enough.

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :if (executable-find "pyright")
    ;; To properly load `lsp-pyright', the `require' instruction is important.
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)))
    :custom
    (lsp-pyright-python-executable-cmd "python3")
    (lsp-pyright-venv-path "~/.cache/pypoetry/virtualenvs/"))
#+end_src

To make sure my Python code is well formatted, I use [[https://github.com/psf/black][black]]. Feel free to install
it in your virtual environment or directly on your system.

#+begin_src emacs-lisp
  (use-package blacken
    :delight
    :hook (python-mode . blacken-mode)
    :custom (blacken-line-length 79))
#+end_src

To sort my Python imports, [[https://github.com/paetzke/py-isort.el][py-isort]] does a good job. Also, do not forget to
install in your virtual environment or directly on your system.

#+begin_src emacs-lisp
  ;; (use-package py-isort
  ;;   :hook ((before-save . py-isort-before-save)
  ;;          (python-mode . pyvenv-mode)))
#+end_src

I use a single virtual environment for all my Python projects. The combination
of [[https://docs.python.org/3/library/venv.html][venv]] with [[https://github.com/jorgenschaefer/pyvenv][pyvenv]] does the job well. When I encounter a Python buffer, my
virtual environment activates and stays activated even after I finish working in
Python. A better behavior would be to define a function through a
=kill-buffer-hook= that would call the =pyvenv-deactivate= command when all Python
buffers are closed.

*** PyEnv --DBD
#+begin_src emacs-lisp
  ;; (use-package pyvenv
  ;;   :after python
  ;;   :custom
  ;;   ;;(pyvenv-default-virtual-env-name (expand-file-name (format "%s/myenv/" xdg-data)))
  ;;   ;;(pyvenv-workon (expand-file-name (format "%s/myenv/" xdg-data)))
  ;;   :config (pyvenv-tracking-mode))
#+end_src

#+RESULTS:

Finally, to better manage the different versions of Python through projects, I
use [[https://github.com/pyenv/pyenv][pyenv]] through [[https://github.com/pythonic-emacs/pyenv-mode][pyenv-mode]]-mode. To use it, make sure you have =pyenv= installed
on your system.

#+begin_src emacs-lisp
  (use-package pyenv-mode
    :hook ((python-mode . pyenv-mode)
           (projectile-switch-project . projectile-pyenv-mode-set))
    :custom (pyenv-mode-set "3.8.5")
    :preface
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))
#+end_src

** SQL

For handling SQL files, the =sql-mode= built-in package of GNU Emacs with the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-sqls/][sqls]]
LSP server does the job.

#+begin_src emacs-lisp
  (use-package sql-mode
    :ensure nil
    :mode "\\.sql\\'")
#+end_src

Finally, I use [[https://github.com/alex-hhh/emacs-sql-indent][sql-indent]] to better manage the indentations of my SQL queries.

#+begin_src emacs-lisp
  (use-package sql-indent
    :delight sql-mode "Œ£"
    :hook (sql-mode . sqlind-minor-mode))
#+end_src

** Postgresql

#+begin_src emacs-lisp

;;; C files

;; Style that matches the formatting used by
;; src/tools/pgindent/pgindent.  Many extension projects also use this
;; style.
(c-add-style "postgresql"
             '("bsd"
               (c-auto-align-backslashes . nil)
               (c-basic-offset . 4)
               (c-offsets-alist . ((case-label . +)
                                   (label . -)
                                   (statement-case-open . +)))
               (fill-column . 78)
               (indent-tabs-mode . t)
               (tab-width . 4)))

(add-hook 'c-mode-hook
          (defun postgresql-c-mode-hook ()
            (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
              (c-set-style "postgresql")
              ;; Don't override the style we just set with the style in
              ;; `dir-locals-file'.  Emacs 23.4.1 needs this; it is obsolete,
              ;; albeit harmless, by Emacs 24.3.1.
              (set (make-local-variable 'ignored-local-variables)
                   (append '(c-file-style) ignored-local-variables)))))


;;; Perl files

;; Style that matches the formatting used by
;; src/tools/pgindent/perltidyrc.
(defun pgsql-perl-style ()
  "Perl style adjusted for PostgreSQL project"
  (interactive)
  (setq perl-brace-imaginary-offset 0)
  (setq perl-brace-offset 0)
  (setq perl-continued-statement-offset 2)
  (setq perl-continued-brace-offset (- perl-continued-statement-offset))
  (setq perl-indent-level 4)
  (setq perl-label-offset -2)
  ;; Next two aren't marked safe-local-variable, so .dir-locals.el omits them.
  (setq perl-indent-continued-arguments 4)
  (setq perl-indent-parens-as-block t)
  (setq indent-tabs-mode t)
  (setq tab-width 4))

(add-hook 'perl-mode-hook
          (defun postgresql-perl-mode-hook ()
             (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
               (pgsql-perl-style))))

;; documentation files

;; *.sgml files are actually XML
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*\\.sgml\\'" . nxml-mode))

(add-hook 'nxml-mode-hook
          (defun postgresql-xml-mode-hook ()
             (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
               (setq fill-column 78)
               (setq indent-tabs-mode nil))))

;; The *.xsl files use 2-space indent, which is consistent with
;; docbook-xsl sources and also the nxml-mode default.  But the *.sgml
;; files use 1-space indent, mostly for historical reasons at this
;; point.
(add-hook 'nxml-mode-hook
          (defun postgresql-xml-src-mode-hook ()
             (when (string-match "/postgres\\(ql\\)?/.*\\.sgml\\'" buffer-file-name)
               (setq nxml-child-indent 1))))


;;; Makefiles

;; use GNU make mode instead of plain make mode
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*Makefile.*" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*\\.mk\\'" . makefile-gmake-mode))

(use-package! sqlformat
  ;; :load-path "~/doom.d/lisp/sqlformat"
  :commands (sqlformat sqlformat-buffer sqlformat-region)
  :hook (sql-mode . sqlformat-on-save-mode)
  :init
  (setq sqlformat-command 'pgformatter
        sqlformat-args '("-s2" "-u1")))



#+end_src>
** Style Sheet

GNU Emacs already has built-in packages for style sheet languages (e.g., CSS,
LESS, and SCSS). Therefore, installing an appropriate LSP server and making sure
that the variables are properly indented is more than enough. For the LSP
server, I use [[https://github.com/vscode-langservers/vscode-css-languageserver][vscode-css-languageserver]] (=css-ls=) although it does not support
the LESS language. To use it, do not forget to configure the LSP package and to
install this LSP server through LSP mode or with your system package manager.

#+begin_src emacs-lisp
  (use-package css-mode
    :ensure flycheck
    :mode "\\.css\\'"
    :custom (css-indent-offset 2)
    :config (flycheck-stylelintrc "~/.stylelintrc.json"))
#+end_src

** TypeScript

For my TypeScript adventures, the [[http://github.com/ananthakumaran/typescript.el][typescript-mode]] package and the
[[https://github.com/typescript-language-server/typescript-language-server][typescript-language-server]] (=ts-ls=) LSP server are more than enough. To use the
LSP server, do not forget to configure the LSP package and to install this LSP
server through LSP mode or with your system package manager if it is not already
done.

Finally, I also use =prettier-js= to ensure proper indentation of my code. To
enable it, you must install the =prettier= package with your package manager
system. Concerning the configuration of prettier, this is done in the JavaScript
section.

#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure flycheck
    :hook ((typescript-mode . prettier-js-mode)
           (typescript-mode . lsp-deferred))
    :mode ("\\.\\(ts\\|tsx\\)\\'")
    :custom
    ;; TSLint is depreciated in favor of ESLint.
    (flycheck-disable-checker 'typescript-tslint)
    (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
    (typescript-indent-level 2)
    :config
    (flycheck-add-mode 'javascript-eslint 'typescript-mode))
#+end_src

** XML

To manage XML related files the =nxml-mode= package built into GNU Emacs and the
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-xml/][LemMinX]] (=xmlls=) LSP server does the job. To use it, do not forget to configure
the LSP package and to install this LSP server through LSP mode or with your
system package manager.

#+begin_src emacs-lisp
  (use-package nxml-mode
    :ensure nil
    :hook (nxml-mode . lsp-deferred)
    :mode ("\\.\\(xml\\|xsd\\|wsdl\\)\\'"))
#+end_src

** YAML

When I have to develop through YAML files, the [[https://github.com/yoshiki/yaml-mode][yaml-mode]] package with the
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-yaml/][yaml-language-server]] LSP server meets my needs. To use it, do not forget to
configure the LSP package and to install this LSP server through LSP mode or
with your system package manager.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :delight "œà"
    :hook (yaml-mode . lsp-deferred)
    :mode ("\\.\\(yaml\\|yml\\)\\'"))
#+end_src

* Advanced Configuration

This section contains the configuration of anecdotal GNU Emacs packages.

** Browser

By default GNU Emacs provides the =browse-url= package to open a browser based on
a query entered via our lovely text editor. Personally, I still prefer to
directly use my browser, namely [[https://github.com/qutebrowser/qutebrowser][qutebrowser]]. However, nothing prevents us from
configuring the =browse-url= package.

#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "qutebrowser"))
#+end_src


** Calculator

On a daily basis, you may have to make calculations or conversions from one unit
to another. With the =calc= build-in package (=C-x * c=) it is possible to do this easily
with GNU Emacs.

Among the useful commands within =calc= that you should know:
- =calc-algebraic-entry=: allows you to enter a value and its unit to later
  to convert it or associate it with an operation.
- =calc-convert-units= (=u c=): converts the output of an algebraic entry (e.g., =25 m= ‚Üí =25000 mm=).
- =calc-simplify-units= (=u s=): simplifies the output of an algebraic entry (e.g., =5 m + 23 m= ‚Üí =5.023 m=).
- =calc-view-units-table= (=u V=): displays a table of units supported by calc.

#+begin_src emacs-lisp
  (use-package calc
    :ensure nil
    :custom
    (math-additional-units
     '((GiB "1024 * MiB" "Giga Byte")
       (MiB "1024 * KiB" "Mega Byte")
       (KiB "1024 * B" "Kilo Byte")
       (B nil "Byte")
       (Gib "1024 * Mib" "Giga Bit")
       (Mib "1024 * Kib" "Mega Bit")
       (Kib "1024 * b" "Kilo Bit")
       (b "B / 8" "Bit")))
    ;; Resets the calc's cache.
    (math-units-table nil))
#+end_src

** Calendar

It is important to know the vacations and remember some official dates to better
organize your vacation planning and gift buying. The built-in =calendar= and
=holidays= packages are there to remind these dates to us.

#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :bind ("C-c 0" . calendar)
    :custom
    (calendar-mark-holidays-flag t)
    (calendar-week-start-day 1))
#+end_src

By default GNU Emacs fills in too many dates and most of the ones I am
interested in are not included. Especially those specific to vacations in my
country. For this reason, I specify to =holidays= to hide some dates and add some
others.

#+begin_src emacs-lisp
  (use-package holidays
    :ensure nil
    :custom
    (holiday-bahai-holidays nil)
    (holiday-hebrew-holidays nil)
    (holiday-islamic-holidays nil)
    (holiday-oriental-holidays nil)
    (holiday-christian-holidays
     '((holiday-fixed 1 6 "Epiphany")
       (holiday-fixed 2 2 "Candlemas")
       (holiday-easter-etc -47 "Mardi Gras")
       (holiday-easter-etc 0 "Easter Day")
       (holiday-easter-etc 1 "Easter Monday")
       (holiday-easter-etc 39 "Ascension")
       (holiday-easter-etc 49 "Pentecost")
       (holiday-fixed 8 15 "Assumption")
       (holiday-fixed 11 1 "All Saints' Day")
       (holiday-fixed 11 2 "Day of the Dead")
       (holiday-fixed 11 22 "Saint Cecilia's Day")
       (holiday-fixed 12 1 "Saint Eloi's Day")
       (holiday-fixed 12 4 "Saint Barbara")
       (holiday-fixed 12 6 "Saint Nicholas Day")
       (holiday-fixed 12 25 "Christmas Day")))
    (holiday-general-holidays
     '((holiday-fixed 1 1 "New Year's Day")
       (holiday-fixed 2 14 "Valentine's Day")
       (holiday-fixed 3 8 "International Women's Day")
       (holiday-fixed 10 31 "Halloween")
       (holiday-fixed 11 11 "Armistice of 1918")))
    (holiday-local-holidays
     '((holiday-fixed 5 1 "Labor Day")
       (holiday-float 3 0 0 "Grandmothers' Day")
       (holiday-float 4 4 3 "Secretary's Day")
       (holiday-float 5 0 2 "Mother's Day")
       (holiday-float 6 0 2 "Father's Day")
       (holiday-fixed 7 21 "Belgian National Day"))))
#+end_src

** Color Display in Text

To automatically display a color when typing a color or hex code values, the
[[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] package is useful.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :delight
    :hook ((prog-mode text-mode) . rainbow-mode))
#+end_src

** Dashboard

Organization is even more important in the 21st century than it was before. What
could be better than launching GNU Emacs with a dashboard that lists the tasks
of the week with =org-agenda= and a list of projects we have recently contributed
to with =projectile=. To our delight the [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] package offers these features
and more.

#+begin_src emacs-lisp
  ;; (use-package dashboard
  ;;   :custom
  ;;   (dashboard-banner-logo-title "With Great Power Comes Great Responsibility!")
  ;;   (dashboard-center-content t)
  ;;   (dashboard-items '((agenda)
  ;;                      (projects . 5)))
  ;;   (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
  ;;   (dashboard-set-file-icons t)
  ;;   (dashboard-set-footer nil)
  ;;   (dashboard-set-heading-icons t)
  ;;   (dashboard-set-navigator t)
  ;;   (dashboard-startup-banner 'logo)
  ;;   :config (dashboard-setup-startup-hook))
#+end_src

** Displays Available Keybindings in Popup

It is difficult to remember every keyboard shortcuts. The [[https://github.com/justbur/emacs-which-key][which-key]] package
helps to solve this. I used [[https://github.com/kai2nenobu/guide-key][guide-key]] in my past days, but =which-key= is a good
replacement.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0.2
    :delight
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

** Documentation

To have a more user-friendly documentation I use the [[https://github.com/Wilfred/helpful][helpful]] package.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-at-point
               helpful-callable
               helpful-command
               helpful-function
               helpful-key
               helpful-macro
               helpful-variable)
    :bind
    ([remap display-local-help] . helpful-at-point)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** EditorConfig

It often happens that you have to work on the same project as other
developers. To keep a coding style you can use [[https://editorconfig.org/][EditorConfig]] through the
[[https://github.com/editorconfig/editorconfig-emacs][editorconfig]] package.

#+begin_src emacs-lisp
  (use-package editorconfig
    :defer 0.3
    :config (editorconfig-mode))
#+end_src

** History

There are times when it is necessary to remember a command. The =savehist=
built-in package allows you to save commands in a file so that you can run them
again later.

#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length 25)
    (savehist-file (expand-file-name (format "%s/emacs/history" EMACS_DIR)))
    :config (savehist-mode))
#+end_src

** Hydra

GNU Emacs has so many commands per mode that it is tedious to remember all the
keybindings for quick access.  Fortunately, [[https://github.com/abo-abo/hydra][hydra]] allows you to create menu
commands and on the basis of a popup, display the commands you have associated
with it.

#+begin_src emacs-lisp
  (use-package hydra
    :bind (("C-c I" . hydra-image/body)
           ("C-c L" . hydra-ledger/body)
           ("C-c M" . hydra-merge/body)
           ("C-c T" . hydra-tool/body)
           ("C-c b" . hydra-btoggle/body)
           ("C-c c" . hydra-clock/body)
           ("C-c e" . hydra-circe/body)
           ;;("C-c f" . hydra-flycheck/body)
           ("C-c g" . hydra-go-to-file/body)
           ("C-c m" . hydra-magit/body)
           ("C-c o" . hydra-org/body)
           ("C-c p" . hydra-projectile/body)
           ("C-c s" . hydra-spelling/body)
           ("C-c t" . hydra-tex/body)
           ("C-c u" . hydra-upload/body)
           ("C-c w" . hydra-windows/body)))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src

*** Hydra / BToggle

Group a lot of commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-btoggle
    (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
    ("Basic"
     (("a" abbrev-mode "abbrev" :toggle t)
      ("h" global-hungry-delete-mode "hungry delete" :toggle t))
     "Coding"
     (("e" electric-operator-mode "electric operator" :toggle t)
      ("F" flyspell-mode "flyspell" :toggle t)
      ("f" flycheck-mode "flycheck" :toggle t)
      ("l" lsp-mode "lsp" :toggle t)
      ("s" smartparens-mode "smartparens" :toggle t))
     "UI"
     (("i" ivy-rich-mode "ivy-rich" :toggle t))))
#+end_src

*** Hydra / Circe

Group circe commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-circe
    (:hint nil :color teal :quit-key "q" :title (with-faicon "comments-o" "Circe" 1 -0.05))
    ("Action"
     (("c" circe "connect")
      ("r" circe-reconnect "reconnect")
      ("u" my/circe-count-nicks "user"))))
#+end_src

*** Hydra / Clock

Group clock commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-clock
    (:hint nil :color teal :quit-key "q" :title (with-faicon "clock-o" "Clock" 1 -0.05))
    ("Action"
     (("c" org-clock-cancel "cancel")
      ("d" org-clock-display "display")
      ("e" org-clock-modify-effort-estimate "effort")
      ("i" org-clock-in "in")
      ("j" org-clock-goto "jump")
      ("o" org-clock-out "out")
      ("p" org-pomodoro "pomodoro")
      ("r" org-clock-report "report"))))
#+end_src

*** Hydra / Flycheck

Group Flycheck commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-flycheck
    (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
    ("Checker"
     (("?" flycheck-describe-checker "describe")
      ("d" flycheck-disable-checker "disable")
      ("m" flycheck-mode "mode")
      ("s" flycheck-select-checker "select"))
     "Errors"
     (("<" flycheck-previous-error "previous" :color pink)
      (">" flycheck-next-error "next" :color pink)
      ("f" flycheck-buffer "check")
      ("l" flycheck-list-errors "list"))
     "Other"
     (("M" flycheck-manual "manual")
      ("v" flycheck-verify-setup "verify setup"))))
#+end_src

*** Hydra / Go To --DBD

Group jump-to-files commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-go-to-file
    (:hint nil :color teal :quit-key "q" :title (with-octicon "file-symlink-file" "Go To" 1 -0.05))
    ("Agenda"
     (("ac" (find-file "~/.personal/agenda/contacts.org") "contacts")
      ("ah" (find-file "~/.personal/agenda/home.org") "home")
      ("as" (find-file "~/.personal/agenda/3semOst.org") "school")
      ("ai" (find-file "~/.personal/agenda/inbox.org") "inbox")
      ("ag" (find-file "~/.personal/agenda/goals.org") "goals")
      ("ap" (find-file "~/.personal/agenda/people.org") "people")
      ("ar" (find-file "~/.personal/agenda/routine.org") "routine")
      ("aR" (find-file "~/.personal/agenda/review.org") "review")
      ("aS" (find-file "~/.personal/agenda/someday.org") "someday")
      ("aw" (find-file "~/.personal/agenda/work.org") "work"))
     "Config"
     (("ca" (find-file (format "%s/sh/aliases" xdg-config)) "aliases")
      ("ce" (find-file "~/.emacs.d/config.org") "emacs")
      ("cE" (find-file (format "%s/sh/environ" xdg-config)) "environ")
      ("cf" (find-file (format "%s/foot/foot.ini" xdg-config)) "foot")
      ("cn" (find-file (format "%s/neofetch/config.conf" xdg-config)) "neofetch")
      ("cq" (find-file (format "%s/qutebrowser/config.py" xdg-config)) "qutebrowser")
      ("cr" (find-file (format "%s/ranger/rc.conf" xdg-config)) "ranger")
      ("cs" (find-file (format "%s/sway/config" xdg-config)) "sway")
      ("ct" (find-file (format "%s/tmux/tmux.conf" xdg-config)) "tmux")
      ("cw" (find-file (format "%s/waybar/config" xdg-config)) "waybar")
      ("cx" (find-file (format "%s/sh/xdg" xdg-config)) "xdg"))
     "Item"
     (("ib" (find-file "~/.personal/items/books.org") "book")
      ("il" (find-file "~/.personal/items/learning.org") "learning")
      ("im" (find-file "~/.personal/items/movies.org") "movies")
      ("ip" (find-file "~/.personal/items/purchases.org") "purchases"))
     "Notes"
     (("na" (find-file (format "~/.personal/notes/affirmations.pdf" xdg-config)) "affirmations"))
     "Other"
     (("ol" (find-file "~/.personal/other/long-goals.org") "long-terms goals")
      ("os" (find-file "~/.personal/other/short-goals.org") "short-terms goals")
      ("ou" (find-file "~/.personal/other/usb.org") "usb"))))
#+end_src

#+RESULTS:
: hydra-go-to-file/body

*** Hydra / Image

Group images commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-image
    (:hint nil :color pink :quit-key "q" :title (with-faicon "file-image-o" "Images" 1 -0.05))
    ("Action"
     (("r" image-rotate "rotate")
      ("s" image-save "save" :color teal))
      "Zoom"
      (("-" image-decrease-size "out")
       ("+" image-increase-size "in")
       ("=" image-transform-reset "reset"))))
#+end_src

*** Hydra / Ledger

Group Ledger commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-ledger
    (:hint nil :color teal :quit-key "q" :title (with-faicon "usd" "Ledger" 1 -0.05))
    ("Action"
     (("b" leadger-add-transaction "add")
      ("c" ledger-mode-clean-buffer "clear")
      ("i" ledger-copy-transaction-at-point "copy")
      ("s" ledger-delete-current-transaction "delete")
      ("r" ledger-report "report"))))
#+end_src

*** Hydra / Magit

Group Magit commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-magit
    (:hint nil :color teal :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Action"
     (("b" magit-blame "blame")
      ("c" magit-clone "clone")
      ("i" magit-init "init")
      ("l" magit-log-buffer-file "commit log (current file)")
      ("L" magit-log-current "commit log (project)")
      ("s" magit-status "status"))))
#+end_src

*** Hydra / Merge

Group Merge commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-merge
    (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Move"
     (("n" smerge-next "next")
      ("p" smerge-prev "previous"))
     "Keep"
     (("RET" smerge-keep-current "current")
      ("a" smerge-keep-all "all")
      ("b" smerge-keep-base "base")
      ("l" smerge-keep-lower "lower")
      ("u" smerge-keep-upper "upper"))
     "Diff"
     (("<" smerge-diff-base-upper "upper/base")
      ("=" smerge-diff-upper-lower "upper/lower")
      (">" smerge-diff-base-lower "base/lower")
      ("R" smerge-refine "redefine")
      ("E" smerge-ediff "ediff"))
     "Other"
     (("C" smerge-combine-with-next "combine")
      ("r" smerge-resolve "resolve")
      ("k" smerge-kill-current "kill current"))))
#+end_src

*** Hydra / Org

Group Org commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-org
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
    ("Action"
     (("A" my/org-archive-done-tasks "archive")
      ("a" org-agenda "agenda")
      ("c" org-capture "capture")
      ("d" org-decrypt-entry "decrypt")
      ("i" org-insert-link-global "insert-link")
      ("j" org-capture-goto-last-stored "jump-capture")
      ("k" org-cut-subtree "cut-subtree")
      ("o" org-open-at-point-global "open-link")
      ("r" org-refile "refile")
      ("s" org-store-link "store-link")
      ("t" org-show-todo-tree "todo-tree"))))
#+end_src

*** Hydra / Projectile

Group Projectile commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-projectile
    (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
    ("Buffers"
     (("b" projectile-switch-to-buffer "list")
      ("k" projectile-kill-buffers "kill all")
      ("S" projectile-save-project-buffers "save all"))
     "Find"
     (("d" projectile-find-dir "directory")
      ("D" projectile-dired "root")
      ("f" projectile-find-file "file")
      ("p" consult-projectile "project"))
     "Other"
     (("i" projectile-invalidate-cache "reset cache"))
     "Search"
     (("r" projectile-replace "replace")
      ("R" projectile-replace-regexp "regexp replace")
      ("s" consult-git-grep "search"))))
#+end_src

*** Hydra / Roam

Group =org-roam= commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-notes
    (:hint nil :color teal :quit-key "q" :title (with-octicon "pencil" "Notes" 1 -0.05))
    ("Notes"
     (("c" org-roam-dailies-capture-today "capture")
      ("C" org-roam-dailies-capture-tomorrow "capture tomorrow")
      ("g" org-roam-graph "graph")
      ("f" org-roam-node-find "find")
      ("i" org-roam-node-insert "insert"))
     "Go To"
     ((">" org-roam-dailies-goto-next-note "next note")
      ("<" org-roam-dailies-goto-previous-note "previous note")
      ("d" org-roam-dailies-goto-date "date")
      ("t" org-roam-dailies-goto-today "today")
      ("T" org-roam-dailies-goto-tomorrow "tomorrow")
      ("y" org-roam-dailies-goto-yesterday "yesterday"))))
#+end_src

*** Hydra / Spelling

Group spelling commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-spelling
    (:hint nil :color teal :quit-key "q" :title (with-faicon "magic" "Spelling" 1 -0.05))
    ("Checker"
     (("c" langtool-correct-buffer "correction")
      ("C" langtool-check-done "clear")
      ("d" ispell-change-dictionary "dictionary")
      ("l" (message "Current language: %s (%s)" langtool-default-language ispell-current-dictionary) "language")
      ("s" my/switch-language "switch")
      ("w" wiki-summary "wiki"))
     "Errors"
     (("<" flyspell-correct-previous "previous" :color pink)
      (">" flyspell-correct-next "next" :color pink)
      ("f" langtool-check "find"))))
#+end_src

*** Hydra / TeX

Group TeX commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-tex
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "tex" "LaTeX" 1 -0.05))
    ("Action"
     (("g" reftex-goto-label "goto")
      ("r" reftex-query-replace-document "replace")
      ("s" counsel-rg "search")
      ("t" reftex-toc "table of content"))))
#+end_src

*** Hydra / Tool

Group Tool commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-tool
    (:hint nil :color teal :quit-key "q" :title (with-faicon "briefcase" "Tool" 1 -0.05))
    ("Network"
     (("c" ipcalc "subnet calculator")
      ("i" ipinfo "ip info"))))
#+end_src

*** Hydra / TypeScript

Group TypeScript commands.

#+begin_src emacs-lisp
  (defhydra hydra-typescript (:color blue)
    "
    ^
    ^TypeScript^          ^Do^
    ^‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ^‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ^‚îÄ‚îÄ^‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    _q_ quit             _b_ back
    ^^                   _e_ errors
    ^^                   _j_ jump
    ^^                   _r_ references
    ^^                   _R_ restart
    ^^                   ^^
    "
    ("q" nil)
    ("b" tide-jump-back)
    ("e" tide-project-errors)
    ("j" tide-jump-to-definition)
    ("r" tide-references)
    ("R" tide-restart-server))
#+end_src

*** Hydra / Upload

Group upload commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-upload
    (:hint nil :color teal :quit-key "q" :title (with-faicon "cloud-upload" "Upload" 1 -0.05))
    ("Action"
     (("b" webpaste-paste-buffer "buffer")
      ("i" imgbb-upload "image")
      ("r" webpaste-paste-region "region"))))
#+end_src

*** Hydra / Windows

Group window-related commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ("c" centered-window-mode "center")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("u" winner-undo "undo")
      ("r" winner-redo "redo")
      ("l" enlarge-window-horizontally "widen")
      ("s" switch-window-then-swap-buffer "swap" :color teal))
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))
#+end_src

** Icons

To integrate icons with =doom-modeline= and other packages, [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] is the
best package that you can have with GNU Emacs. To download the icons on your
machine, you must run the =all-the-icons-install-fonts= command when you install
this package.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :config (unless (find-font (font-spec :name "all-the-icons"))
              (all-the-icons-install-fonts t)))
#+end_src

** Indentations

By default GNU Emacs auto-indents the code while typing with
=electric-indent-mode=, but the indentation made is wrong when moving blocks,
transposing lines and so on. The [[https://github.com/Malabarba/aggressive-indent-mode][aggresive-indent]] package is an improved version
of the previous mode, allowing a code to be always indented.

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :custom (aggressive-indent-comments-too t))
#+end_src

#+RESULTS:

With code nesting, it is important to always have a discrete visual on the
indentation of our code. The [[https://github.com/DarthFennec/highlight-indent-guides/][highlight-indent-guides]] package allows you to see
at a glance if an indentation is bad through block highlight.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src

** IRC

IRC is the best way for me to get a quick answer to a question and to learn from
more competent people than me on a subject.

To start using IRC, you will need to [[https://libera.chat/guides/registration][create an account]]. Once your account is
created, you can store it in your =.authinfo.gpg= file and add this file to the
=auth-sources= variable. To add your IRC account in the =authinfo.gpg= file, add in
the following line with your credentials:

#+BEGIN_EXAMPLE
  machine irc.libera.chat login <nickname> password <password> port 6697
#+END_EXAMPLE

After spending many years on ERC, I decided to move to [[https://github.com/emacs-circe/circe][circe]] as a IRC client
which I find more user-friendly.

#+begin_src emacs-lisp
  (use-package circe
    :commands circe
    :preface
    (defun my/circe-count-nicks ()
      "Display the number of users connected on the current channel."
      (interactive)
      (when (eq major-mode 'circe-channel-mode)
        (message "%i users are online on %s."
                 (length (circe-channel-nicks)) (buffer-name))))

    (defun my/circe-fetch-password (&rest params)
      "Fetch the NickServ password for an username."
      (require 'auth-source)
      (let ((match (car (apply 'auth-source-search params))))
        (if match
            (let ((secret (plist-get match :secret)))
              (if (functionp secret)
                  (funcall secret)
                secret))
          (error "[‚úó] Password not found for %S" params))))

    (defun my/circe-nickserv-password (server)
      "Fetch the NickServ password for the Libera Chat."
      (my/circe-fetch-password :login "rememberYou" :machine "irc.libera.chat"))
    :custom
    (circe-default-part-message nil)
    (circe-default-quit-message nil)
    (circe-format-say (format "{nick:+%ss}: {body}" 8))
    (circe-network-options
     '(("Libera Chat"
        :nick "rememberYou"
        :tls t
        :port 6697
        :server-buffer-name "‚áÑ Libera Chat"
        :channels (:after-auth "#archlinux" "#bash" "#emacs" "#linux" "#python" "#qutebrowser" "#sway")
        :nickserv-password my/circe-nickserv-password)))
    (circe-reduce-lurker-spam t)
    (circe-use-cycle-completion t)
    (lui-flyspell-p t)
    :config
    (circe-lagmon-mode)
    (enable-circe-color-nicks)
    (enable-circe-display-images))
#+end_src

Finally if like me you would like to be informed by desktop notifications when
you are mentioned on IRC, the [[https://github.com/eqyiel/circe-notifications][circe-notifications]] package allows you to do that.

#+begin_src emacs-lisp
  (use-package circe-notifications
    :after circe
    :hook (circe-server-connected . enable-circe-notifications))
#+end_src

** Linters

To integrate syntax checking during development, [[https://www.flycheck.org/][Flycheck]] lints warnings and
errors directly within buffers. To use it, you need to install the [[https://github.com/flycheck/flycheck][flycheck]]
package on GNU Emacs and install the necessary linters for the programming
languages you use, via your system package manager.

*NOTE:* The GNU Emacs community has produced a number of [[https://github.com/flycheck/flycheck/blob/master/doc/community/extensions.rst][extensions to Flycheck]].

#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :delight
  ;;   :hook (lsp-mode . flycheck-mode)
  ;;   :bind (:map flycheck-mode-map
  ;;               ("M-'" . flycheck-previous-error)
  ;;               ("M-\\" . flycheck-next-error))
  ;;   :custom (flycheck-display-errors-delay .3))
#+end_src

** Mails

After trying the =gnus= built-in package that I found too old and =notmuch= that in
my opinion lacks features like the ability to delete some emails and be able to
write emails easily with =org=, I finally found my happiness with =mu4e=.

I used =offlineimap=, but I find it slower than =mbsync=. This is why I now use
=mbsync= to synchronize emails on IMAP server with local mails dir folder.

*NOTE:* to use =mbsync= with your Gmail account, you will need to enable access
for less secure apps in your Google account.

*** mu4e

Before that you can use this configuration, make sure to install =mu= on your
operating system and to create directories corresponding to those in your
mailbox. Then, initialize the =mu= database, by replacing values of =--maildir= and
=--my-address= with yours.

#+begin_src shell
  mu init --maildir ~/mails --my-address=${EMAIL}
#+end_src

Now all that remains is to configure =mu4e=:

#+begin_src emacs-lisp
  ;; (use-package mu4e
  ;;   :ensure nil
  ;;   :ensure-system-package mu
  ;;   :load-path "/usr/share/emacs/site-lisp/mu4e"
  ;;   :commands mu4e
  ;;   :hook (mu4e-compose-mode . turn-off-auto-fill)
  ;;   :bind (:map mu4e-headers-mode-map
  ;;               ("M-[" . scroll-down-command)
  ;;               ("M-]" . scroll-up-command))
  ;;   :preface
  ;;   (defun my/set-email-account (label letvars)
  ;;     "Registers an email address for mu4e."
  ;;     (setq mu4e-contexts
  ;;           (cl-loop for context in mu4e-contexts
  ;;                    unless (string= (mu4e-context-name context) label)
  ;;                    collect context))
  ;;     (let ((context (make-mu4e-context
  ;;                     :name label
  ;;                     :enter-func (lambda () (mu4e-message "Switched context"))
  ;;                     :leave-func #'mu4e-clear-caches
  ;;                     :match-func
  ;;                     (lambda (msg)
  ;;                       (when msg
  ;;                         (string-prefix-p (format "/%s" msg)
  ;;                                          (mu4e-message-field msg :maildir))))
  ;;                     :vars letvars)))
  ;;       (push context mu4e-contexts)
  ;;       context))
  ;;   :custom
  ;;   (mu4e-attachment-dir "~/downloads")
  ;;   ;; To avoid synchronization issues/ with mbsync
  ;;   (mu4e-change-filenames-when-moving t)
  ;;   (mu4e-confirm-quit nil)
  ;;   (mu4e-completing-read-function 'ivy-read)
  ;;   (mu4e-compose-complete-only-after (format-time-string
  ;;                                      "%Y-%m-%d"
  ;;                                      (time-subtract (current-time) (days-to-time 150))))
  ;;   (mu4e-compose-context-policy 'ask-if-none)
  ;;   (mu4e-compose-dont-reply-to-self t)
  ;;   (mu4e-compose-format-flowed t)
  ;;   (mu4e-get-mail-command (format "mbsync -c '%s/isync/mbsyncrc' -a" xdg-config))
  ;;   (mu4e-headers-date-format "%F")
  ;;   (mu4e-headers-fields
  ;;    '((:account    . 10)
  ;;      (:human-date . 12)
  ;;      (:flags      . 6)
  ;;      (:from       . 22)
  ;;      (:subject    . nil)))
  ;;   (mu4e-headers-time-format "%R")
  ;;   (mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
  ;;   (mu4e-maildir "~/mails")
  ;;   (mu4e-org-contacts-file "~/.personal/agenda/contacts.org")
  ;;   (mu4e-update-interval (* 5 60))
  ;;   (mu4e-use-fancy-chars t)
  ;;   (mu4e-view-prefer-html t)
  ;;   (mu4e-view-show-addresses t)
  ;;   (mu4e-view-show-images t)
  ;;   :config
  ;;   (my/set-email-account "erroriamnotfound"
  ;;                         '((mu4e-drafts
    ;;                          -folder . "/personal/erroriamnotfound/drafts")
    ;;                         (mu4e-refile-folder . "/personal/erroriamnotfound/all")
    ;;                         (mu4e-sent-folder   . "/personal/erroriamnotfound/sent")
    ;;                         (mu4e-trash-folder  . "/personal/erroriamnotfound/trash")
    ;;                         (mu4e-maildir-shortcuts . ((:maildir "/personal/erroriamnotfound/all"    :key ?a)
    ;;                                                    (:maildir "/personal/erroriamnotfound/inbox"  :key ?i)
    ;;                                                    (:maildir "/personal/erroriamnotfound/drafts" :key ?d)
    ;;                                                    (:maildir "/personal/erroriamnotfound/sent"   :key ?s)
    ;;                                                    (:maildir "/personal/erroriamnotfound/trash"  :key ?t)))
    ;;                         (smtpmail-smtp-user . "erroriamnotfound@gmail.com")
    ;;                         (smtpmail-smtp-server . "smtp.gmail.com")
    ;;                         (smtpmail-smtp-service . 465)
    ;;                         (smtpmail-stream-type . ssl)
    ;;                         (user-mail-address . "erroriamnotfound@gmail.com")
    ;;                         (user-full-name . "Who Cares")))
    ;; (my/set-email-account "terencio.agozzino"
    ;;                       '((mu4e-drafts-folder . "/personal/terencio-agozzino/drafts")
    ;;                         (mu4e-refile-folder . "/personal/terencio-agozzino/all")
    ;;                         (mu4e-sent-folder   . "/personal/terencio-agozzino/sent")
    ;;                         (mu4e-trash-folder  . "/personal/terencio-agozzino/trash")
    ;;                         (mu4e-maildir-shortcuts . ((:maildir "/personal/terencio-agozzino/all"    :key ?a)
    ;;                                                    (:maildir "/personal/terencio-agozzino/inbox"  :key ?i)
    ;;                                                    (:maildir "/personal/terencio-agozzino/drafts" :key ?d)
    ;;                                                    (:maildir "/personal/terencio-agozzino/sent"   :key ?s)
    ;;                                                    (:maildir "/personal/terencio-agozzino/trash"  :key ?t)))
    ;;                         (smtpmail-smtp-user . "terencio.agozzino@gmail.com")
    ;;                         (smtpmail-smtp-server . "smtp.gmail.com")
    ;;                         (smtpmail-smtp-service . 465)
    ;;                         (smtpmail-stream-type . ssl)
    ;;                         (user-mail-address . "terencio.agozzino@gmail.com")
    ;;                         (user-full-name . "Terencio Agozzino")))
    ;; (setq mu4e-headers-attach-mark    `("a" . ,(with-faicon "paperclip" "" 0.75 -0.05 "all-the-icons-lyellow"))
    ;;       mu4e-headers-draft-mark     `("D" . ,(with-octicon "pencil" "" 0.75 -0.05 "all-the-icons-lsilver"))
    ;;       mu4e-headers-encrypted-mark `("x" . ,(with-faicon "lock" "" 0.75 -0.05 "all-the-icons-lred"))
    ;;       mu4e-headers-flagged-mark   `("F" . ,(with-faicon "flag" "" 0.75 -0.05 "all-the-icons-maroon"))
    ;;       mu4e-headers-new-mark       `("N" . ,(with-faicon "check-circle" "" 0.75 -0.05 "all-the-icons-silver"))
    ;;       mu4e-headers-passed-mark    `("P" . ,(with-faicon "share" "" 0.75 -0.05 "all-the-icons-purple "))
    ;;       mu4e-headers-replied-mark   `("R" . ,(with-faicon "reply" "" 0.75 -0.05 "all-the-icons-lgreen"))
    ;;       mu4e-headers-seen-mark      `("S" . ,(with-octicon "check" "" 1 -0.05 "all-the-icons-lgreen"))
    ;;       mu4e-headers-signed-mark    `("s" . ,(with-faicon "key" "" 0.75 -0.05 "all-the-icons-cyan"))
    ;;       mu4e-headers-trashed-mark   `("T" . ,(with-faicon "trash" "" 0.75 -0.05 "all-the-icons-lred"))
    ;;       mu4e-headers-unread-mark    `("u" . ,(with-faicon "envelope" "" 0.75 -0.05 "all-the-icons-silver")))
    ;; (add-to-list 'mu4e-header-info-custom
    ;;              '(:account
    ;;                :name "Account"
    ;;                :shortname "Account"
    ;;                :help "Which account this email belongs to"
    ;;                :function
    ;;                (lambda (msg)
    ;;                  (let ((maildir (mu4e-message-field msg :maildir)))
    ;;                    (format "%s" (substring maildir 1 (string-match-p "/" maildir 1)))))))
    ;; (add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
    ;; (add-to-list 'mu4e-view-actions '("org-contact-add" . mu4e-action-add-org-contact) t))
#+end_src

To edit my emails in =org-mode=, I use =org-mime=. It also to add a signature,
automatically convert Org in HTML, and custom some HTML elements.

#+begin_src emacs-lisp
  ;; (use-package org-mime
  ;;   :after mu4e
  ;;   :hook (message-send . org-mime-htmlize)
  ;;   :bind (:map mu4e-compose-mode-map
  ;;               ("C-c '" . org-mime-edit-mail-in-org-mode))
  ;;   :config
  ;;   (add-hook 'org-mime-html-hook (lambda ()
  ;;                                   (goto-char (point-max))
  ;;                                   (insert "--<br>
  ;;                  <strong>Terencio Agozzino</strong><br>
  ;;                  Data Scientist
  ;;                  <br>
  ;;                  <span style='text-decoration:none; color:#000;'>(+32) 495 45 29 07</span>")))
  ;;   (add-hook 'org-mime-html-hook (lambda ()
  ;;                                   (org-mime-change-element-style "p" (format "color: %s" "#1a1a1a"))))

  ;;   (add-hook 'org-mime-html-hook (lambda ()
  ;;                                   (org-mime-change-element-style "strong" (format "color: %s" "#000"))))

  ;;   (add-hook 'org-mime-html-hook (lambda ()
  ;;                                   (org-mime-change-element-style
  ;;                                    "pre" "background: none repeat scroll 0% 0% rgb(61, 61, 61);
  ;;                                                  border-radius: 15px;
  ;;                                                  color: #eceff4;
  ;;                                                  font-family: Courier, 'Courier New', monospace;
  ;;                                                  font-size: small;
  ;;                                                  font-weight: 400;
  ;;                                                  line-height: 1.3em;
  ;;                                                  padding: 20px;
  ;;                                                  quotes: '¬´' '¬ª';
  ;;                                                  width: 41%;")))
  ;;   (setq org-mime-export-options '(:preserve-breaks t
  ;;                                                    :section-numbers nil
  ;;                                                    :with-author nil
  ;;                                                    :with-toc nil)))
#+end_src
Being able to read mails is a good thing, but being notified when we receive
mails is better! The following few lines allow you to receive desktop
notifications and modeline display for =mu4e=:

#+begin_src emacs-lisp
  ;; (use-package mu4e-alert
  ;;   :hook ((after-init . mu4e-alert-enable-mode-line-display)
  ;;          (after-init . mu4e-alert-enable-notifications))
  ;;   :config (mu4e-alert-set-default-style 'libnotify))
#+end_src

*** Sending Mail

Before you can send mails, create the =.authinfo= file if it is not already
done. Then add the following two lines replacing /terencio.agozzino/ (which
corresponds to my /terencio.agozzino@gmail.com/ Gmail address without the domain
name) and /<password>/ by those that match your real information:

#+BEGIN_EXAMPLE
  machine imap.gmail.com login terencio.agozzino@gmail.com password <password> port 993
  machine smtp.gmail.com login terencio.agozzino@gmail.com password <password> port 465
#+END_EXAMPLE

Similar to IRC, if you want to store your password in a /GPG/ file, you just need
to specify a file priority list with =auth-sources=, to specify to GNU Emacs where
to start looking for your password first. Then encrypt that file with =gpg -c
.authinfo= and do not forget to delete the =.authinfo= file.

#+begin_src emacs-lisp
  ;; (use-package message
  ;;   :ensure nil
  ;;   :after mu4e
  ;;   :custom
  ;;   (message-citation-line-format "On %B %e, %Y at %l:%M %p, %f (%n) wrote:\n")
  ;;   (message-citation-line-function 'message-insert-formatted-citation-line)
  ;;   (message-kill-buffer-on-exit t)
  ;;   (message-send-mail-function 'smtpmail-send-it)
  ;;   (mml-secure-openpgp-signers '("208FCDBB98190562")))
#+end_src

All you need to do now is to test sending your mails with =C-x m= or directly from
=mu4e=!

** Money Management

Good money management is a skill to be acquired as soon as possible. Fortunately
for us, [[https://www.ledger-cli.org/][Ledger]] allows you to have a double-entry accounting system directly from
the UNIX command line. To use Ledger with GNU Emacs, you need to the [[https://github.com/ledger/ledger-mode][ledger-mode]]
package. However, do not forget to install the =ledger= package with your system
package manager.

I discovered Ledger as a student and learning how to manage time and expenses at
the same time was too much. I decided for the time being to briefly learn Ledger
and focus more on time management. One issue I had with Ledger was the lack of
support from my bank to export my transactions into a file type that Ledger
could understand. Unfortunately, since I often made bank transfers, encoding
each payment by hand was a pain. For the curious people, alternatives to Ledger
exist, some of which are open-source and proprietary (e.g., [[https://www.youneedabudget.com/][YNAB]]).

*NOTE:* by default, Ledger uses the [[ https://xkcd.com/1179/][ISO 8601]] format to write dates, which is the
recommended format.

#+begin_src emacs-lisp
  ;; (use-package ledger-mode
  ;;   :mode ("\\.\\(dat\\|ledger\\)\\'")
  ;;   :preface
  ;;   (defun my/ledger-save ()
  ;;     "Clean the ledger buffer at each save."
  ;;     (interactive)
  ;;     (ledger-mode-clean-buffer)
  ;;     (save-buffer))
  ;;   :bind (:map ledger-mode-map
  ;;               ("C-x C-s" . my/ledger-save))
  ;;   :hook (ledger-mode . ledger-flymake-enable)
  ;;   :custom
  ;;   (ledger-clear-whole-transactions t)
  ;;   (ledger-reconcile-default-commodity "EUR")
  ;;   (ledger-reports
  ;;    '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
  ;;      ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
  ;;      ("budget" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
  ;;      ("budget goals" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
  ;;      ("budget obligations" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
  ;;      ("budget debts" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
  ;;      ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
  ;;      ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
  ;;      ("income statement" "%(binary) --invert --real -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
  ;;    (ledger-report-use-header-line nil)))
#+end_src

Finally, to provides a =flychecker= checker for Ledger files, you can use
[[https://github.com/purcell/flycheck-ledger][flycheck-ledger]].

#+begin_src emacs-lisp
  ;; (use-package flycheck-ledger :after ledger-mode)
#+end_src

** Package Menu

The package menu has a simplistic interface. The [[https://github.com/Malabarba/paradox][paradox]] package improves the
display of this interface, provides different mode line information and other
features.

#+begin_src emacs-lisp
  (use-package paradox
    :defer 1
    :custom
    (paradox-column-width-package 25)
    (paradox-display-star-count nil)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    :config (paradox-enable))
#+end_src

** Parentheses

Managing parentheses can be painful. One of the first things you want to do is
to change the appearance of the highlight of the parentheses pairs.

#+begin_src emacs-lisp
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#161719")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))
#+end_src

Then, I also like to highlight brackets and other delimiters (e.g., brackets or
braces) with a different color, depending on their depth. The [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
package allows such behavior.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Finally, to manage your parenthesis, I recommend to use [[https://github.com/Fuco1/smartparens][smartparens]] which is in
my opinion a better alternative to [[https://github.com/emacsmirror/paredit][paredit]] or to the built-in =electric-pair-mode=
package.

#+begin_src emacs-lisp
  (use-package smartparens
    :delight
    :hook (prog-mode . smartparens-mode)
    :bind (("M-'" . sp-backward-sexp)
           ("M-\\" . sp-forward-sexp)
           ("M-(" . sp-wrap-round)
           ("M-[" . sp-wrap-curly))
    :custom (sp-escape-quotes-after-insert nil))
#+end_src

** Paste

To get or provide help, it is important to be able to parse a whole buffer or a
region of this buffer. The [[https://github.com/etu/webpaste.el][webpaste]] package allows you to parse your code using a
pastebin-like service.

#+begin_src emacs-lisp
  (use-package webpaste
    :defer 0.4
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-p" . webpaste-paste-buffer-or-region)
           ("C-c C-p C-r" . webpaste-paste-region))
    :custom (webpaste-provider-priority '("dpaste.org" "dpaste.com" "ix.io")))
#+end_src

Similarly, the [[https://github.com/ecraven/imgbb.el][imgbb]] package allows you to select and upload images using the [[https://imgbb.com/][imgbb]] service.

#+begin_src emacs-lisp
  (use-package imgbb
    :commands imgbb-upload
    :bind ("C-c C-p C-i" . imgbb-upload))
#+end_src

** PDF

By default, opening PDFs under GNU Emacs sucks. Fortunately, the [[https://github.com/vedang/pdf-tools][pdf-tools]]
package provides =pdf-view= to offer a better support for PDFs.

*NOTE:* If =pdf-tools= fails to open a PDF, please execute the =pdf-tools-install=
command.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query))
#+end_src

To be comfortable with PDFs, let's customize [[https://github.com/politza/pdf-tools/blob/master/lisp/pdf-view.el][pdf-view]] which is a major mode part
of the =pdf-tools= package.

#+begin_src emacs-lisp
  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    ;; Avoid searching for unicodes to speed up pdf-tools.
    (pdf-view-use-unicode-ligther nil)
    ;; Enable HiDPI support, at the cost of memory.
    (pdf-view-use-scaling t))
#+end_src

** Project Interactions

To interact with your projects characterized by a folder with at least one
special file (e.g., a VCS marker or a project descriptor file like =pom.xml= or
=Gemfile=), the [[https://github.com/bbatsov/projectile][projectile]] package is a must on GNU Emacs.

#+begin_src emacs-lisp
  ;; (use-package projectile
  ;;   :diminish (projectile-mode)
  ;;   :custom
  ;;   (projectile-cache-file (expand-file-name (format "%s/emacs/projectile.cache" xdg-cache)))
  ;;   (projectile-enable-caching t)
  ;;   (projectile-keymap-prefix (kbd "C-c C-p"))
  ;;   (projectile-known-projects-file (expand-file-name (format "%s/emacs/projectile-bookmarks.eld" xdg-cache)))
  ;;   (projectile-mode-line '(:eval (projectile-project-name)))
  ;;   ;; Define the folder containing git repositories (e.g., ~/.local/share/git).
  ;;   (projectile-project-search-path '("~/.local/share/git"))
  ;;   (projectile-switch-project-action #'projectile-dired)
  ;;   :config (projectile-global-mode))
#+end_src

I also use =projectile= with =consult= through the [[https://gitlab.com/OlMon/consult-projectile][counsult-projectile]] package.

#+begin_src emacs-lisp
(use-package el-patch
  :straight t)

  (use-package consult-projectile
    :after (consult projectile)
    :straight (consult-projectile :type git :host gitlab :repo
                                  "OlMon/consult-projectile" :branch "master")
    :commands (consult-projectile))
#+end_src

Finally, [[https://github.com/purcell/ibuffer-projectile][ibuffer-projectile]] is helpful to group the buffers in the =ibuffer= list
by [[#projectile][projectile]] project.

#+begin_src emacs-lisp
  ;; (use-package ibuffer-projectile
  ;;   :after ibuffer
  ;;   :preface
  ;;   (defun my/ibuffer-projectile ()
  ;;     (ibuffer-projectile-set-filter-groups)
  ;;     (unless (eq ibuffer-sorting-mode 'alphabetic)
  ;;       (ibuffer-do-sort-by-alphabetic)))
  ;;   :hook (ibuffer . my/ibuffer-projectile))
#+end_src

** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package yasnippet
    :delight yas-minor-mode "œÖ"
    :hook (yas-minor-mode . my/disable-yas-if-no-snippets)
    :config (yas-global-mode)
    :preface
    (defun my/disable-yas-if-no-snippets ()
      (when (and yas-minor-mode (null (yas--get-snippet-tables)))
        (yas-minor-mode -1))))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)
#+end_src

** Spaces Around the Operators

To automatically add spacing around operators as you develop, the
[[https://github.com/davidshepherd7/electric-operator][electric-operator]] package is there for that.

*NOTE:* I don't use =electric-operator= for C-like languages which works a bit less
well according to the author of the package.

#+begin_src emacs-lisp
  (use-package electric-operator
    :hook ((css-mode java-mode js2-mode
                    python-mode sql-mode typescript-mode) . electric-operator-mode))
#+end_src
** Term Definitions

Occasionally, I would like to have a summary of a term directly on GNU Emacs,
before that I would like to know more about this term. The [[https://github.com/jozefg/wiki-summary.el][wiki-summary]] package
allows this behavior.

#+begin_src emacs-lisp
  (use-package wiki-summary
    :commands (wiki-summary wiki-summary-insert)
    :bind ("C-c W" . wiki-summary)
    :preface
    (defun my/format-summary-in-buffer (summary)
      "Given a summary, sticks it in the *wiki-summary* buffer and displays
       the buffer."
      (let ((buf (generate-new-buffer "*wiki-summary*")))
        (with-current-buffer buf
          (princ summary buf)
          (fill-paragraph)
          (goto-char (point-min))
          (view-mode))
        (pop-to-buffer buf)))
    :config
    (advice-add 'wiki-summary/format-summary-in-buffer
                :override #'my/format-summary-in-buffer))
#+end_src

** Try Packages

It happens that I want to try a GNU Emacs package without installing it. The [[https://github.com/larstvei/Try][try]]
package allows this behavior.

#+begin_src emacs-lisp
  (use-package try :commands try)
#+end_src

** Version Control System

It is quite common to work on [[https://git-scm.com/][Git]] repositories, therefore it is important to
have a configuration that suits us. To interact with Git, GNU Emacs has [[https://github.com/magit/magit][magit]]
which is the best tool I have tested. With =magit= you can directly interact with
your repositories through an interface.

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

To make sure that the summary and the body of the commits respect the
conventions, the [[https://github.com/magit/magit/blob/master/lisp/git-commit.el][git-commit]] package from =magit= is perfect.

#+begin_src emacs-lisp
  (use-package git-commit
    :ensure nil
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensure that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil))
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50))
#+end_src

To manage [[https://www.gnu.org/software/diffutils/manual/html_node/diff3-Options.html][diff3]] conflicts with Git, the smerge-mode builtin package is helpful.

#+begin_src emacs-lisp
  (use-package smerge-mode
    :after hydra
    :delight " ‚àì"
    :commands smerge-mode
    :bind (:map smerge-mode-map
                ("M-g n" . smerge-next)
                ("M-g p" . smerge-prev))
    :hook (magit-diff-visit-file . hydra-merge/body))
#+end_src

Finally, I like to know the modified lines of a file while I edit it.

#+begin_src emacs-lisp
  (use-package git-gutter
    :defer 0.3
    :delight
    :config (global-git-gutter-mode))
#+end_src

** Whitespaces and Kill

It is annoying to see useless blank spaces at the end of a line or a file. Let's
get rid of these spaces. Most of the time, I also like to have justified texts.

#+begin_src emacs-lisp
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :preface
    (defun my/kill-region-or-line ()
      "When called interactively with no active region, kill the whole line."
      (interactive)
      (if current-prefix-arg
          (progn
            (kill-new (buffer-string))
            (delete-region (point-min) (point-max)))
        (progn (if (use-region-p)
                   (kill-region (region-beginning) (region-end) t)
                 (kill-region (line-beginning-position) (line-beginning-position
                                                         2))))))
    :hook ((before-save . delete-trailing-whitespace)
           ((prog-mode text-mode) . turn-on-auto-fill))
    :bind ("C-w" . my/kill-region-or-line)
    :custom (set-mark-command-repeat-pop t))
#+end_src

Finally, I also like is to be able to delete every consecutive space characters
when a space character is deleted. The [[https://github.com/nflath/hungry-delete][hungry-delete]] package allows this
behavior.

#+begin_src emacs-lisp
  (use-package hungry-delete
    :defer 0.7
    :delight
    :config (global-hungry-delete-mode))
#+end_src

* Emacs Client
#+begin_src emacs-lisp
(server-start)
#+end_src

* Terminals

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun smiles/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . smiles/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

* Conclusion
Go through [[https://github.com/emacs-lsp/lsp-java#supported-commands][Supported commands]] section of lsp-java github page to see commands provided in lsp-mode. Most of these commands are available under lsp's ~C-c l~ option. I hope this configuration file was useful.
